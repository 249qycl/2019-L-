#ifndef __CAR_H__
#define __CAR_H__

extern uint16 Right_times,L_circle_times;
extern uint8  get_times;
typedef struct 
{
    uint8   mv_mode;            //用于记录车体当前所处特殊模式状况，形成保护锁抗干扰
    uint8   Servo_mode;
    uint8   Motor_mode;
    
    uint8   outside_flag;       //出界标志
     
    uint16  times;
    float   M_Duty;
    float   S_Duty;
    
    int16   delta_err;          //偏差的变化量
    int16   Dir_Error;          //方向偏差  【车体正为0  车体左偏为负 右偏为正】
    int16   Last_Error;
    
    float   DIR_k;              //方向变化的斜率
  
    int16   speed;              //车速
}Car,*pCar;

extern pCar Ecc_Car;//创建车体

typedef struct
{
    uint8   Rt_k;               //进环垂直电感作用强度【70】
    uint8   in_round;           //进环标志
    int     All_ad_sum;         //水平电感总和
    float   S_duty;             //舵机调试参数
}ADJ;

extern ADJ param;

/*******************************************************
*        中值1.4ms    左值1.8ms    右值1ms    频率Hz
*   duty    70          90           50        500 
*           56          72           40        400
*           35          45           25        250
*           28          36           20        200
*           14          18           10        100
*           7           9            5         50
*******************************************************/
#define Hz_50           50
#define Hz_100          100
#define Hz_200          200
#define Hz_250          250
#define Hz_400          400
#define Hz_500          500

#define M_FRENT         13000      //电机频率【13~17KHz为宜，避免与电感的谐振频率冲突】
    
#define S_FRENT         Hz_100      //舵机频率
#define M_VALUE         13.4        //6.6          
#define L_VALUE         10.7        //5.1
#define R_VALUE         15.4        //7.8


void Car_speed_get(pCar Q);
void Error_update(int16 *input1,int16 *input2,uint8 frent);
void Car_init();
void Servo_set(float duty);
void Motor_set(float duty);
void Servo_move(uint8 mode);
void Motor_move(uint8 mode);
void DIR_error_slope();
uint8 Special_action(uint8 dir,uint8 speed1,uint8 speed2,uint8 add_time,uint8 sub_time);
#endif